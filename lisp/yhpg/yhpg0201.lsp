(defun solve (input)
  (setf edge (parse-integer (subseq input 0 (search ":" input)) ))
  (setf hex (subseq input (+ (search ":" input) 1)))
  (setf num (format nil "~v,'0b" (* (length hex) 4) (parse-integer hex :radix 16)))
  (setf ret "")
  (loop for i from 0 to (- edge 1) collect
        (loop for j downfrom (- edge 1) to 0 collect
              (progn
                (setf index (+ (* j edge) i))
                (setf ret (concatenate 'string ret(subseq num index (+ index 1)))))))
  (format nil "~A:~A" edge (format nil "~x" (parse-integer (subseq (concatenate 'string ret "0000") 0 (* (length hex) 4)) :radix 2))))


(print (solve "3:5b8"))
(print "3:de0")
(print " ")
(print (solve "1:8" ))
(print "1:8")
(print " ")
(print (solve "2:8"))
(print "2:4")
(print " ")
(print (solve "2:4"))
(print "2:1")
(print " ")
(print (solve "2:1"))
(print "2:2")
(print " ")
(print (solve "3:5d0"))
(print "3:5d0")
(print " ")
(print (solve "4:1234"))
(print "4:0865")
(print " ")
(print (solve "5:22a2a20" ))
(print "5:22a2a20")
(print " ")
(print (solve "5:1234567" ))
(print "5:25b0540")
(print " ")
(print (solve "6:123456789" ))
(print "6:09cc196a6")
(print " ")
(print (solve "7:123456789abcd" ))
(print "7:f1a206734b258")
(print " ")
(print (solve "7:fffffffffffff" ))
(print "7:ffffffffffff8")
(print " ")
(print (solve "7:fdfbf7efdfbf0" ))
(print "7:ffffffffffc00")
(print " ")
(print (solve "8:123456789abcdef1" ))
(print "8:f0ccaaff78665580")
(print " ")
(print (solve "9:112233445566778899aab" ))
(print " 9:b23da9011d22daf005d40")

